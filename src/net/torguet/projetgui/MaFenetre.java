/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.torguet.projetgui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Patrice Torguet
 */
public class MaFenetre extends javax.swing.JFrame {
    /**
     * Liste des contacts pour sauvegarde.
     */
    private Contact contacts [] = new Contact[100];
    /**
     * Compteur de contacts.
     */
    private int prochainContact = 0;
    
    /**
     * Modèle de la liste graphique
     * Il s'agit de l'objet qui stocke les données affichées dans la liste
     * graphique.
     */
    private DefaultListModel modeleContacts = new DefaultListModel();
    
    /**
     * Nom du fichier contenant le carnet d'adresse
     */
    private String nomFichier = "fichier.bin";
    
    /**
     * Contact coupé ou copié
     */
    private Contact copieContact;
    
    /**
     * Contact sélectionné ou -1 si pas de sélection
     */
    private int indiceContactSelectionne = -1;
    
    /**
     * Constructeur
     */
    public MaFenetre() {
        // essayons de charger le fichier
        loadContacts(nomFichier, true);
        initComponents();
        
        this.setTitle("Carnet d'Adresse : "+nomFichier);
        
        // désactivons les options du menu Edit
        // on les activera lors de la sélection d'un contact
        // et après copie/coupe pour coller
        this.copyMenuItem.setEnabled(false);
        this.cutMenuItem.setEnabled(false);
        this.deleteMenuItem.setEnabled(false);
        this.pasteMenuItem.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listeContacts = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuNouveauContact = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        listeContacts.setModel(modeleContacts);
        listeContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listeContactsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listeContacts);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        menuNouveauContact.setText("Nouveau Contact");
        menuNouveauContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNouveauContactActionPerformed(evt);
            }
        });
        fileMenu.add(menuNouveauContact);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode appelée pour quitter l'application
     * @param evt l'événement qui a déclenché l'appel de la méthode
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // Demandons à l'utilisateur s'il veut sauver avant de quitter
        Object[] options = {"Oui", "Non", "Annuler"};
        int rep = JOptionPane.showOptionDialog(this, "Voulez-vous sauver avant de quitter ?", 
          "Sauvegarde Fichier Existant", 
          JOptionPane.YES_NO_CANCEL_OPTION, 
          JOptionPane.WARNING_MESSAGE, 
          null, options, options[0]);
        switch(rep) {
            case JOptionPane.YES_OPTION :
                saveContacts(nomFichier);
                System.exit(0);
                break;
            case JOptionPane.NO_OPTION :
                System.exit(0);
                break;
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Méthode appelée pour afficher la fenêtre A propos
     * @param evt l'événement qui a déclenché l'appel de la méthode
     */
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // Crée et affiche la fenêtre A propos (modale)
        AboutDialog dialog = new AboutDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * Méthode appelée pour afficher l'aide
     * @param evt l'événement qui a déclenché l'appel de la méthode
     */
    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        // Crée et affiche la fenêtre d'aide (non modale)
        HelpDialog dialog = new HelpDialog(this, false);
        dialog.setVisible(true);
    }//GEN-LAST:event_contentsMenuItemActionPerformed

    /**
     * Méthode qui permet d'ajouter un nouveau contact
     * @param evt l'événement qui a déclenché l'appel de la méthode
     */
    private void menuNouveauContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNouveauContactActionPerformed
        // vérifions qu'il y ait de la place
        if(prochainContact>=this.contacts.length) {
            // affichons un message d'erreur
            JOptionPane.showMessageDialog(this, "Vous êtes limité à "+this.contacts.length+" contacts");
            return;
        }
        // on crée la fenêtre
        ContactDialog contact = new ContactDialog(this, true);
        // on l'affiche
        contact.setVisible(true);
        
        // si l'utilisateur a cliqué sur OK
        if(contact.getReturnStatus() == ContactDialog.RET_OK) {
            // on récupère le contact créé par la fenêtre
            // et on le stocke dans le tableau
            contacts[prochainContact] = contact.getContact();
            // on a un contact de plus
            prochainContact++;
            // il faut aussi ajouter le contact dans le modèle de la liste graphique
            modeleContacts.addElement(contact.getContact());
        }
    }//GEN-LAST:event_menuNouveauContactActionPerformed

    /**
     * Gère le clic et le double-clic sur un contact
     * @param evt l'événement qui a déclenché l'appel de la méthode
     */
    private void listeContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listeContactsMouseClicked
        // on récupère la liste graphique
        JList list = (JList)evt.getSource();
        if (evt.getClickCount() == 1) {
            // récupérons l'indice de l'élément sur lequel on a cliqué
            this.indiceContactSelectionne = list.locationToIndex(evt.getPoint());
            // indiquons qu'il est sélectionné
            list.setSelectedIndex(indiceContactSelectionne);
            // activons les options copier/couper/supprimer
            this.cutMenuItem.setEnabled(true);
            this.copyMenuItem.setEnabled(true);
            this.deleteMenuItem.setEnabled(true);
        }
        // on vérifie que c'est bien un double-clic
        else if (evt.getClickCount() == 2) {
            // récupérons l'indice de l'élément sur lequel on a double-cliqué
            int index = list.locationToIndex(evt.getPoint());
            
            // Créons la fenêtre d'édition en lui donnant la référence
            // du contact à modifier
            ContactDialog contact = new ContactDialog(this, true, contacts[index]);
            // affichons là
            contact.setVisible(true);
            
            // Note on a modifié le contact dans la méthode qui gère OK
            // Donc il n'y a rien à faire ici
        }
    }//GEN-LAST:event_listeContactsMouseClicked

    /**
     * Méthode appelée pour sauver la liste de contacts
     * @param evt l'événement qui a déclenché l'appel de la méthode
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        saveContacts(nomFichier);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    /**
     * Méthode pour "Save As..."
     * @param evt l'événement
     */
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // Crée le sélecteur de fichiers
        final JFileChooser fc = new JFileChooser();
        // ouvre le sélecteur et attend la fermeture
        int returnVal = fc.showSaveDialog(this);

        // Si l'utilisateur à choisi un nom de fichier
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            // vérifions s'il n'existe pas déjà
            if (file.exists()) {
                // Demandons à l'utilisateur s'il veut vraiment écraser le fichier
                Object[] options = {"OK", "Annuler"};
                int rep = JOptionPane.showOptionDialog(this, "Le fichier " + file.getName() + 
                  " existe déjà.\nVoulez-vous vraiment l'écraser ?", 
                  "Fichier Existant", 
                  JOptionPane.YES_NO_OPTION, 
                  JOptionPane.WARNING_MESSAGE, 
                  null, options, options[1]);
                if(rep == JOptionPane.NO_OPTION) {
                    // on arrête la méthode
                    return;
                }
            }
            // sauve les contacts dans ce fichier
            saveContacts(file.getAbsolutePath());
            // on garde le chemin du fichier
            nomFichier = file.getAbsolutePath();
            // on écrit simplement le nom du fichier dans le titre 
            this.setTitle("Carnet d'Adresse : "+file.getName());
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    /**
     * Méthode pour ouvrir un fichier
     * @param evt l'événement
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Crée le sélecteur de fichiers
        final JFileChooser fc = new JFileChooser();
        // ouvre le sélecteur et attend la fermeture
        int returnVal = fc.showOpenDialog(this);

        // Si l'utilisateur à choisi un nom de fichier
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            // tente de charger les contacts depuis ce fichier
            if (loadContacts(file.getAbsolutePath(), false)) {
                // si ça marche
                // on garde le chemin du fichier
                nomFichier = file.getAbsolutePath();
                // on écrit simplement le nom du fichier dans le titre 
                this.setTitle("Carnet d'Adresse : "+file.getName());
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * Appelé quand on clique sur le bouton de fermeture de fenêtre
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exitMenuItemActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Réalise la copie système
     */
    private void clipboardCopy() {
        StringSelection data = new StringSelection
         (this.copieContact.toFullString());
        Clipboard cb = Toolkit.getDefaultToolkit()
         .getSystemClipboard();
        cb.setContents(data, data);
    }
    
    /**
     * Option Couper
     * @param evt 
     */
    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        // vérifions qu'un contact est bien sélectionné :
        if (this.indiceContactSelectionne != -1) {
            // récupérons la référence du contact
            this.copieContact = this.contacts[indiceContactSelectionne];
            // écrasons l'entrée dans la liste
            this.deleteMenuItemActionPerformed(evt);
            // re-activons l'option coller :
            this.pasteMenuItem.setEnabled(true);
            // préparons la copie système
            clipboardCopy();
        }
    }//GEN-LAST:event_cutMenuItemActionPerformed

    /**
     * Copie d'un contact
     * @param evt 
     */
    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        // vérifions qu'un contact est bien sélectionné :
        if (this.indiceContactSelectionne != -1) {
            // copions le contact
            this.copieContact = new Contact(this.contacts[indiceContactSelectionne]);
            // activons l'option coller :
            this.pasteMenuItem.setEnabled(true);
            // préparons la copie système
            clipboardCopy();
        }
    }//GEN-LAST:event_copyMenuItemActionPerformed

    /**
     * Coller un contact copié ou coupé
     * @param evt 
     */
    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        // vérifions qu'un contact est prêt à être collé
        if (this.copieContact != null) {
            // vérifions qu'il y a de la place
            if(prochainContact>=this.contacts.length) {
                // affichons un message d'erreur
                JOptionPane.showMessageDialog(this, "Vous êtes limité à "+this.contacts.length+" contacts");
                return;
            }
            // plaçons le contact dans la liste
            this.contacts[this.prochainContact] = this.copieContact;
            // comptons le
            this.prochainContact++;
            // ajoutons le au modèle de la liste graphique
            this.modeleContacts.addElement(this.copieContact);
            // déselection du contact précédemment copié
            this.listeContacts.clearSelection();
            this.copieContact = null;
            this.indiceContactSelectionne=-1;
            // désactivation des choix du menu edit
            this.copyMenuItem.setEnabled(false);
            this.cutMenuItem.setEnabled(false);
            this.deleteMenuItem.setEnabled(false);
            this.pasteMenuItem.setEnabled(false);
        }
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    /**
     * Suppression d'un contact
     * @param evt 
     */
    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        // vérifions qu'un contact est bien sélectionné :
        if (this.indiceContactSelectionne != -1) {
            // Enlevons le contact du modèle de la liste graphique
            this.modeleContacts.removeElementAt(indiceContactSelectionne);
            // Ecrasons le contact sélectionné dans le tableau
            for(int i = indiceContactSelectionne; i<this.prochainContact; i++) {
                // si on est pas à la fin
                if(i < this.contacts.length) {
                    // on recopie la référence du contact suivant
                    this.contacts[i] = this.contacts[i+1];
                } else {
                    this.contacts[i] = null;
                }
            }
            // il faut décrémenter le nombre de contacts
            this.prochainContact--;
            // déselection du contact courant
            this.listeContacts.clearSelection();
            this.indiceContactSelectionne = -1;
            // désactivation des choix du menu edit
            this.copyMenuItem.setEnabled(false);
            this.cutMenuItem.setEnabled(false);
            this.deleteMenuItem.setEnabled(false);
            this.pasteMenuItem.setEnabled(false);
        }
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    /**
     * Méthode de sauvegarde des contacts dans un fichier
     * @param fichier nom du fichier
     */
    private void saveContacts(String fichier) {
        try {
            // Création d'un nouveau flux qui crée un fichier binaire
            FileOutputStream sortie = new FileOutputStream(fichier);
            // On crée un flux plus évolué en encapsulant le précédent flux
            ObjectOutputStream sortieObjets = new ObjectOutputStream(sortie);
            // On écrit l'objet sur le flux
            // Ceci va aussi écrire tous les attributs
            sortieObjets.writeObject(contacts);
            // il ne faut pas oublier de fermer le flux
            sortieObjets.close(); // ferme aussi sortie
        } catch (Exception ex) {
            // affichons un message d'erreur
            JOptionPane.showMessageDialog(this, "Impossible de sauver le fichier ("+ex.getLocalizedMessage()+")");
        }
    }
    
    /**
     * Méthode de chargement des contacts depuis un fichier
     * @param fichier nom du fichier
     */
    private boolean loadContacts(String fichier, boolean construction) {
        File fich = new File(fichier);
        if (fich.exists()) {
            try {
                // Relisons ce qu'on a écrit
                FileInputStream entree = new FileInputStream(fichier);
                // On crée un flux plus évolué en encapsulant le précédent flux
                ObjectInputStream entreeObjets = new ObjectInputStream(entree);
                // On lit un objet sur le flux
                // Ca recrée l'objet et ses attributs (new)
                // Il faut caster car readObject renvoie un Object
                Object obj = entreeObjets.readObject();
                // on vérifie que l'objet est du bon type
                if (obj instanceof Contact[]) {
                    // on caste
                    contacts = (Contact[]) obj;
                    
                    // vide le modèle au cas où on charge un fichier
                    modeleContacts.clear();
                    // on remet aussi le compteur à 0
                    prochainContact = 0;
                    
                    // on parcours tous le tableau
                    for(Contact c : contacts) {
                        // pour chaque contact non null
                        if(c != null) {
                            // on ajoute le contact au modèle de la liste graphique
                            modeleContacts.addElement(c);
                            // il faut compter les contacts déjà présents
                            prochainContact++;
                        }
                    }
                }      
                // il vaut mieux fermer le flux
                entreeObjets.close();
                return true;
            } catch (Exception ex) {
                // on ne doit pas afficher de message si on vient du constructeur
                if (!construction) {
                    // affichons un message d'erreur
                    JOptionPane.showMessageDialog(this, "Impossible de charger le fichier ("+ex.getLocalizedMessage()+")");
                }
                return false;
            }
        } else {
            // on ne doit pas afficher de message si on vient du constructeur
            if (!construction) {
                // affichons un message d'erreur
                JOptionPane.showMessageDialog(this, "Le fichier n'existe pas !");
            }
            return false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MaFenetre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Contact> listeContacts;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuNouveauContact;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables


}
